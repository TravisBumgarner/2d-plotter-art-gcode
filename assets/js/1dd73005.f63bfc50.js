"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[299],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},_=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),_=i,g=d["".concat(s,".").concat(_)]||d[_]||m[_]||o;return n?r.createElement(g,a(a({ref:t},c),{},{components:n})):r.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=_;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}_.displayName="MDXCreateElement"},8043:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:3,description:"Convert an image into a series of parallel lines where each line is one of N colors."},a="2023-11-15 Image Lines",l={unversionedId:"gallery/image_lines",id:"gallery/image_lines",title:"2023-11-15 Image Lines",description:"Convert an image into a series of parallel lines where each line is one of N colors.",source:"@site/docs/gallery/image_lines.mdx",sourceDirName:"gallery",slug:"/gallery/image_lines",permalink:"/gcode2dplotterart/docs/gallery/image_lines",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/image_lines.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Convert an image into a series of parallel lines where each line is one of N colors."},sidebar:"tutorialSidebar",previous:{title:"2023-10-05 Roaming Rectangles",permalink:"/gcode2dplotterart/docs/gallery/roaming_rectangles"},next:{title:"2023-11-19 Wandering Lines",permalink:"/gcode2dplotterart/docs/gallery/wandering_lines"}},s={},p=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...o}=e;return(0,i.kt)(d,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2023-11-15-image-lines"},"2023-11-15 Image Lines"),(0,i.kt)("h2",{id:"description"},"Description"),(0,i.kt)("p",null,"Convert an image into a series of parallel lines where each line is one of N colors."),(0,i.kt)("h2",{id:"images"},"Images"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"example of plotted code",src:n(8094).Z,width:"1600",height:"1410"}),"\n",(0,i.kt)("img",{alt:"example of plotted code",src:n(6005).Z,width:"1600",height:"1578"})),(0,i.kt)("h2",{id:"plotter-preview"},"Plotter Preview"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"preview screenshot",src:n(8446).Z,width:"640",height:"480"})),(0,i.kt)("h2",{id:"code"},"Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from gcode2dplotterart import Plotter2D\nimport cv2\nimport numpy as np\nfrom imutils import resize\nfrom math import floor\nfrom typing import List\n\n"""\nPreface - numpy and cv2 are still a bit alien to me. The code here could be done better.\n\n1. Take in an image.\n2. Grayscale all of the pixels so that each pixel is represented by a number from 0 to 255.\n3. Bucket the pixels such that\n  - 0 -> A   becomes 0\n  - A -> B   becomes 1\n  - B -> C   becomes 2\n  - C -> 255 becomes 3\n4. Start with the first row of pixels.\n5. Add the first point to a new path and move to the next pixel.\n6. If the current pixel is the same as the previous pixel, append the point to the path and repeat, otherwise,\n    start a new path.\n7. Continue until all points of all colors are plotted.\n\nNote\n- Make sure that the combination of X_SCALE, Y_SCALE, and the resized image aren\'t too big for the plotter area. \n\n"""\n\n# These numbers can be changed in combination with the image size. Adds a bit of spacing since I use thicker\n# pens and they\'d overlap.\nX_PIXELS_PER_PLOTTER_UNIT = 1 / 3\nY_PIXELS_PER_PLOTTER_UNIT = 1 / 3\n\n\ndef evenly_distribute_pixels_per_color(\n    img: cv2.typing.MatLike, n: int\n) -> List[List[int]]:\n    """\n    Ensures that each color has the same number of pixels.\n\n    Arg:\n        `img` : cv2.typing.MatLike\n            The image to process\n        `n` : Number of colors to distribute pixels into\n\n    Returns\n    `   img` : List[List[int]]\n           Image mapped to n colors\n    """\n\n    total_pixels = img.size\n    pixel_bins = []\n    histogram, bins = np.histogram(img.ravel(), 256, (0, 256))\n    count = 0\n    for pixel_value, pixel_count in enumerate(histogram):\n        if count >= total_pixels / (n):\n            count = 0\n            pixel_bins.append(pixel_value)\n        count += pixel_count\n\n    return np.subtract(np.digitize(img, pixel_bins), 0)\n\n\ndef resize_image_for_plotter(filename: str) -> List[List[int]]:\n    img = cv2.imread(filename)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n    # The following math will ensure that the image is scaled to the plotter size and the remaining math\n    # throughout the program will work.\n    plotter_ratio = "landscape" if plotter.width > plotter.height else "portrait"\n    # It appears shape is (columns, rows)\n    img_ratio = "landscape" if img.shape[1] > img.shape[0] else "portrait"\n    if (\n        plotter_ratio == "landscape"\n        and img_ratio == "landscape"\n        or plotter_ratio == "portrait"\n        and img_ratio == "landscape"\n    ):\n        img = resize(img, width=floor(plotter.width * X_PIXELS_PER_PLOTTER_UNIT))\n    elif (\n        plotter_ratio == "portrait"\n        and img_ratio == "portrait"\n        or plotter_ratio == "landscape"\n        and img_ratio == "portrait"\n    ):\n        print("resizing height")\n        img = resize(img, height=floor(plotter.height * Y_PIXELS_PER_PLOTTER_UNIT))\n\n    print("resized to ", img.shape)\n    return img\n\n\nplotter = Plotter2D(\n    title="Horizontal Line Art",\n    x_min=0,\n    x_max=200,\n    y_min=-140,  # Note - My plotting goes from -150 to 0.\n    y_max=0,\n    feed_rate=10000,\n    output_directory="./output",\n    handle_out_of_bounds="Warning",  # It appears that some points end up outside of bounds so scale down.\n)\n\nCOLOR_LAYERS = [\n    "purple",\n    "blue",\n    "yellow",\n    "orange",\n    "red",\n]\nfor layer in COLOR_LAYERS:\n    plotter.add_layer(layer, color=layer)\n\ninput_filename = "landscape.jpg"\n\n# Works with color PNGs exported from Lightroom and Photoshop. Could learn some more about reading images\nresized_image = resize_image_for_plotter(input_filename)\ncolor_reduced_image = evenly_distribute_pixels_per_color(\n    resized_image, n=len(COLOR_LAYERS)\n)\n\n\nfor y_index, row in enumerate(color_reduced_image):\n    y_plotter_scale = (\n        y_index / Y_PIXELS_PER_PLOTTER_UNIT * -1\n    )  # My plotter goes y=-150 to y=0, therefore numbers are negative. Probably a better solution.\n    line_start = [0, y_plotter_scale]\n    line_end = None\n    current_color_value = color_reduced_image[0][y_index]\n\n    for x_index, color_value in enumerate(row):\n        x_plotter_scale = x_index / X_PIXELS_PER_PLOTTER_UNIT\n        if color_value == current_color_value:\n            continue\n\n        line_end = [x_plotter_scale, y_plotter_scale]\n        plotter.layers[COLOR_LAYERS[current_color_value]].add_line(\n            line_start[0], line_start[1], line_end[0], line_end[1]\n        )\n\n        line_start = line_end\n\n        current_color_value = color_value\n    line_end = [x_plotter_scale, y_plotter_scale]\n    plotter.layers[COLOR_LAYERS[current_color_value]].add_line(\n        line_start[0], line_start[1], line_end[0], line_end[1]\n    )\n\nplotter.preview()\nplotter.save()\n\n')))}m.isMDXComponent=!0},8094:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/example1-3c9d4c0a76c1d373e7bfc6187b6cc442.jpg"},6005:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/example2-faa4ad660426a54ca6f86acad5a03e74.jpg"},8446:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/preview-c4de95c4c53bd447c49eb5d9439b5c04.png"}}]);