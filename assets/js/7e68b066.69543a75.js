"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[882],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>_});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),d=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=d(r),m=a,_=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return r?n.createElement(_,l(l({ref:t},s),{},{components:r})):n.createElement(_,l({ref:t},s))}));function _(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=r[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7199:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));const o={},l=void 0,i={unversionedId:"api/Plotter",id:"api/Plotter",title:"Plotter",description:"\\_AbstractPlotter Objects",source:"@site/docs/api/Plotter.mdx",sourceDirName:"api",slug:"/api/Plotter",permalink:"/gcode2dplotterart/docs/api/Plotter",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/api/Plotter.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"API",permalink:"/gcode2dplotterart/docs/category/api"},next:{title:"layer",permalink:"/gcode2dplotterart/docs/api/layer"}},p={},d=[{value:"_AbstractPlotter Objects",id:"_abstractplotter-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"get_min_and_max_points",id:"get_min_and_max_points",level:4},{value:"add_layer",id:"add_layer",level:4},{value:"add_border_layer",id:"add_border_layer",level:4},{value:"add_preview_layer",id:"add_preview_layer",level:4},{value:"width",id:"width",level:4},{value:"height",id:"height",level:4},{value:"is_point_in_bounds",id:"is_point_in_bounds",level:4},{value:"get_plotting_data",id:"get_plotting_data",level:4},{value:"preview",id:"preview",level:4},{value:"save",id:"save",level:4}],s={toc:d},u="wrapper";function c(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter"}),(0,a.kt)("h1",{id:"gcode2dplotterartplotter"},"gcode2dplotterart/Plotter"),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter"}),(0,a.kt)("h2",{id:"_abstractplotter-objects"},"_","AbstractPlotter Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class _AbstractPlotter(ABC)\n")),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.__init__"}),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(title: str,\n             x_min: float,\n             x_max: float,\n             y_min: float,\n             y_max: float,\n             feed_rate: float,\n             handle_out_of_bounds: THandleOutOfBounds,\n             output_directory: str = "./output")\n')),(0,a.kt)("p",null,"Initialize a new Plotter instance."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"title")," ",(0,a.kt)("em",{parentName:"li"},"str")," - The title of the work of art\nonly supports plotter_2d."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"x_min")," ",(0,a.kt)("em",{parentName:"li"},"float")," - The minimum X-coordinate of the plotter."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y_min")," ",(0,a.kt)("em",{parentName:"li"},"float")," - The minimum Y-coordinate of the plotter."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"x_max")," ",(0,a.kt)("em",{parentName:"li"},"float")," - The maximum X-coordinate of the plotter."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y_max")," ",(0,a.kt)("em",{parentName:"li"},"float")," - The maximum Y-coordinate of the plotter."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"feed_rate")," ",(0,a.kt)("em",{parentName:"li"},"float")," - The feed rate for the plotter."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"handle_out_of_bounds")," ",(0,a.kt)("em",{parentName:"li"},'"Warning", "Error", "Silent"'),' - How to handle\nout-of-bounds points. "Warning" will print a warning, skip the\npoint, continue, "Error" will throw an error and stop. "Silent"\nwill skip the point and continue.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"output_directory")," ",(0,a.kt)("em",{parentName:"li"},"str")," - The directory where G-code files will be\nsaved."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"include_border_layer")," ",(0,a.kt)("em",{parentName:"li"},"bool")," - Whether to include a border layer,\noutlines the plotting area, plotting a border."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"include_preview_layer")," ",(0,a.kt)("em",{parentName:"li"},"bool")," - Whether to include a preview layer,\noutlines the plotting area without plotting anything.")),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.get_min_and_max_points"}),(0,a.kt)("h4",{id:"get_min_and_max_points"},"get","_","min","_","and","_","max","_","points"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def get_min_and_max_points(\n) -> Dict[Literal["x_min", "y_min", "x_max", "y_max"], float]\n')),(0,a.kt)("p",null,"Find the min and max plot points of the plotter."),(0,a.kt)("p",null,"Returns\n{x_min: float, y_min: float, x_max: float, y_max: float}\nA dictionary containing the min and max plot points of the plotter."),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.add_layer"}),(0,a.kt)("h4",{id:"add_layer"},"add","_","layer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@abstractmethod\ndef add_layer(title: str,\n              color: Optional[str] = None,\n              preview_only: bool = False) -> Union[Layer2d, Layer3d]\n")),(0,a.kt)("p",null,"Add a new layer to the plotter"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("p",null,"  title : str\nThe title of the layer. Used when saving a layer to G-Code.\ncolor : str\nA hex color (such as ",(0,a.kt)("inlineCode",{parentName:"p"},"00FF00"),") or human readable color name\n(see ",(0,a.kt)("a",{parentName:"p",href:"https://matplotlib.org/stable/gallery/color/named_colors.html#css-colors"},"MatplotLib"),"\nfor a list of colors). Used with the ",(0,a.kt)("inlineCode",{parentName:"p"},"preview")," method. Defaults to a random color if not provided.\nline_width : Optional","[float]","\nThe width of the line to be plotted with the ",(0,a.kt)("inlineCode",{parentName:"p"},"preview")," method. Some experimentation is required to match the\n",(0,a.kt)("inlineCode",{parentName:"p"},"line_width")," to the thickness of the plotting instrument. Defaults to 2.0\npreview_only : bool\nWhether the layer is a preview layer. Preview layers show the\nplotter head in motion but do not come in contact with plotting\nsurface. Defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"False")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,"  Layer\nThe newly created layer. Allows for chaining of the layer's add\nmethods."),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.add_border_layer"}),(0,a.kt)("h4",{id:"add_border_layer"},"add","_","border","_","layer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def add_border_layer() -> None\n")),(0,a.kt)("p",null,"Creates a new layer titled border. The border layer outlines the print\narea, plotting a border."),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.add_preview_layer"}),(0,a.kt)("h4",{id:"add_preview_layer"},"add","_","preview","_","layer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def add_preview_layer() -> None\n")),(0,a.kt)("p",null,"Creates a new layer titled preview. The preview layer outlines the\nplotting area and plots an X through the middle without plotting anything.\nUseful for checking the the plotting surface is flat."),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.width"}),(0,a.kt)("h4",{id:"width"},"width"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef width() -> float\n")),(0,a.kt)("p",null,"Width of the plotting area"),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.height"}),(0,a.kt)("h4",{id:"height"},"height"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef height() -> float\n")),(0,a.kt)("p",null,"Height of the plotting area"),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.is_point_in_bounds"}),(0,a.kt)("h4",{id:"is_point_in_bounds"},"is","_","point","_","in","_","bounds"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def is_point_in_bounds(x: float, y: float) -> bool\n")),(0,a.kt)("p",null,"Whether the point to be potted is within the plotter bounds"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("p",null,"  x : float\nThe x-coordinate of the point to be plotted\ny : float\nThe y-coordinate of the point to be plotted"),(0,a.kt)("p",null,"  Returns\nboolean\nWhether the point to be plotted is within the plotter bounds"),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.get_plotting_data"}),(0,a.kt)("h4",{id:"get_plotting_data"},"get","_","plotting","_","data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def get_plotting_data() -> Dict[str, Dict[str, List[str]]]\n")),(0,a.kt)("p",null,"Get current plotting data."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("p",null,'  {"layer" : {"setup": [], "plotting": [], "teardown": []}}\nA dictionary of dictionaries containing the setup, plotting, and teardown instructions as an array of\nG-Code instruction strings per layer. Mostly used for testing purposes.'),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.preview"}),(0,a.kt)("h4",{id:"preview"},"preview"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def preview() -> None\n")),(0,a.kt)("p",null,"Generate a preview graph of the plotter's layers. Layers will be plotted in the order they've been added to the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Plotter"),". Only looks at instructions during the plotting phase."),(0,a.kt)("a",{id:"gcode2dplotterart/Plotter._AbstractPlotter.save"}),(0,a.kt)("h4",{id:"save"},"save"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def save(clear_output_before_save: bool = True) -> None\n")),(0,a.kt)("p",null,"Save all the layers to the output directory defined by the\n",(0,a.kt)("inlineCode",{parentName:"p"},"output_directory")," Plotter param. Each layer will be saved\nas an individual file with the filename defined by\n",(0,a.kt)("inlineCode",{parentName:"p"},"{layer_number}_{layer_title}.gcode"),". If include_border_layer or include_preview_layer\nare set to True, they will be saved as ",(0,a.kt)("inlineCode",{parentName:"p"},"border.gcode")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"preview.gcode")," respectively."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("p",null,"  clear_output_before_save : boolean\nWhether to remove all files from the artwork output directory\n(defined as ","[output_directory]","/","[title]",") before saving,\ndefaults to True."))}c.isMDXComponent=!0}}]);