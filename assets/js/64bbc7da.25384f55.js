"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[31],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},_="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),_=c(n),m=o,u=_["".concat(p,".").concat(m)]||_[m]||d[m]||i;return n?r.createElement(u,a(a({ref:t},s),{},{components:n})):r.createElement(u,a({ref:t},s))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[_]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7864:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:2,description:"Series of rectangles where one is connected to the next one, of varying colors and sizes."},a="2023-10-05 Roaming Rectangles",l={unversionedId:"gallery/roaming_rectangles",id:"gallery/roaming_rectangles",title:"2023-10-05 Roaming Rectangles",description:"Series of rectangles where one is connected to the next one, of varying colors and sizes.",source:"@site/docs/gallery/roaming_rectangles.mdx",sourceDirName:"gallery",slug:"/gallery/roaming_rectangles",permalink:"/gcode2dplotterart/docs/gallery/roaming_rectangles",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/gallery/roaming_rectangles.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,description:"Series of rectangles where one is connected to the next one, of varying colors and sizes."},sidebar:"tutorialSidebar",previous:{title:"2023-06-20 Sine Waves",permalink:"/gcode2dplotterart/docs/gallery/sine_waves"},next:{title:"2023-11-15 Image Lines",permalink:"/gcode2dplotterart/docs/gallery/image_lines"}},p={},c=[{value:"Description",id:"description",level:2},{value:"Images",id:"images",level:2},{value:"Plotter Preview",id:"plotter-preview",level:2},{value:"Code",id:"code",level:2}],s={toc:c},_="wrapper";function d(e){let{components:t,...i}=e;return(0,o.kt)(_,(0,r.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"2023-10-05-roaming-rectangles"},"2023-10-05 Roaming Rectangles"),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"Series of rectangles where one is connected to the next one, of varying colors and sizes. "),(0,o.kt)("h2",{id:"images"},"Images"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"example of plotted code",src:n(961).Z,width:"1600",height:"1075"}),"\n",(0,o.kt)("img",{alt:"example of plotted code",src:n(9484).Z,width:"1600",height:"1147"})),(0,o.kt)("h2",{id:"plotter-preview"},"Plotter Preview"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"preview screenshot",src:n(8547).Z,width:"640",height:"480"})),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from random import randint, choice\nfrom gcode2dplotterart import Plotter2D\n\nBLACK_LAYER = 'thin_black'\nCOLOR_LAYERS=['thick_red', 'thick_yellow', 'thick_blue']\n\nplotter = Plotter2D(\n  title=\"Roaming Rectangles\",\n  x_min = 0,\n  x_max = 220,\n  y_min = -150, # Note - My plotting goes from -150 to 0.\n  y_max = 0,\n  feed_rate=10000,\n  output_directory=\"./output\",\n  handle_out_of_bounds='Warning' # Some points will be out of bounds for this, that's ok.\n)\n\nfor layer in COLOR_LAYERS:\n  plotter.add_layer(layer)\nplotter.add_layer(BLACK_LAYER)\n\n# Min movement is 10% of the total width/height\nMIN_MOVEMENT_X = round((plotter.x_max - plotter.x_min) * 0.10)\nMIN_MOVEMENT_Y = round((plotter.y_max - plotter.y_min) * 0.10)\n\n# Max movement is 20% of the total width/height\nMAX_MOVEMENT_X = round((plotter.x_max - plotter.x_min) * 0.20)\nMAX_MOVEMENT_Y = round((plotter.y_max - plotter.y_min) * 0.20)\n\ndef calculate_next_move(start_point, end_point):\n  # Don't start the next rectangle where the current rectangle started, don't include (start_point[0], start_point[1])\n  next_point_start_options = [\n    (start_point[0], end_point[1]),\n    (end_point[0], start_point[1]),\n    (end_point[0], end_point[1]),\n  ]\n\n  next_point_start = choice(next_point_start_options)\n\n  # Future improvement - Could optimize here so that choice([-1,1]) factors in the previous rectangle and doesn't plot on top.\n  movement_x = randint(MIN_MOVEMENT_X, MAX_MOVEMENT_X) * choice([-1, 1])\n  movement_y = randint(MIN_MOVEMENT_Y, MAX_MOVEMENT_Y) * choice([-1, 1])\n\n  next_point_end = (next_point_start[0] + movement_x, next_point_start[1] + movement_y)\n\n  return [next_point_start, next_point_end]\n\n# Starting rectangle is a rectangle plotted around the center point.\nCENTER_POINT = [(plotter.x_max + plotter.x_min) / 2, (plotter.y_max + plotter.y_min) / 2]\nstart_point = [CENTER_POINT[0] - plotter.width * 0.05, CENTER_POINT[1] - plotter.height * 0.05]\nend_point = [CENTER_POINT[0] + (plotter.x_max - plotter.x_min) * 0.05, CENTER_POINT[1] + (plotter.y_max - plotter.y_min) * 0.05 ]\n\ncurrent_layer_index = 0\nplotter.layers[COLOR_LAYERS[current_layer_index]].add_rectangle(start_point[0], start_point[1], end_point[0], end_point[1])\nplotter.layers[BLACK_LAYER].add_rectangle(start_point[0], start_point[1], end_point[0], end_point[1])\n\nTOTAL_RECTANGLES = 100\ncurrent_rectangle_count = 0\n\nwhile True:\n  # With 3 colors being plotted, the next rectangle plotted should not be the same color as the previous.\n  current_layer_index_choices = [index for [index, value] in enumerate(COLOR_LAYERS) if index != current_layer_index]\n  current_layer_index = choice(current_layer_index_choices)\n\n  while True:\n    # Lazy solution to prevent plotter from going out of bounds\n    [next_start_point, next_end_point] = calculate_next_move(start_point, end_point)\n    if plotter.is_point_in_bounds(next_start_point[0], next_start_point[1]) and plotter.is_point_in_bounds(next_end_point[0], next_end_point[1]):\n      break\n\n  plotter.layers[COLOR_LAYERS[current_layer_index]].add_rectangle(next_start_point[0], next_start_point[1], next_end_point[0], next_end_point[1])\n  plotter.layers[BLACK_LAYER].add_rectangle(next_start_point[0], next_start_point[1], next_end_point[0], next_end_point[1])\n  start_point = next_start_point\n  end_point = next_end_point\n  \n  current_rectangle_count += 1\n  if current_rectangle_count == TOTAL_RECTANGLES:\n    break\n\nplotter.preview()\nplotter.save()\n")))}d.isMDXComponent=!0},961:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/example1-49560dc8cf00bced638bb5df56e3977e.jpg"},9484:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/example2-53389bb1cc21dc7a9aba3a302f04e952.jpg"},8547:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/preview-3041c1a43a511c65623b6ccad17ba507.png"}}]);