"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[959],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>h});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),u=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},s=function(t){var e=u(t.components);return r.createElement(p.Provider,{value:e},t.children)},d="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,p=t.parentName,s=i(t,["components","mdxType","originalType","parentName"]),d=u(n),c=a,h=d["".concat(p,".").concat(c)]||d[c]||m[c]||l;return n?r.createElement(h,o(o({ref:e},s),{},{components:n})):r.createElement(h,o({ref:e},s))}));function h(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i[d]="string"==typeof t?t:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4300:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const l={},o="Plotter3D",i={unversionedId:"api/Plotter3D",id:"api/Plotter3D",title:"Plotter3D",description:"Plotter3D is a 3D plotter for creating artwork using G-code. This class should be used with a 3D printer.",source:"@site/docs/api/Plotter3D.mdx",sourceDirName:"api",slug:"/api/Plotter3D",permalink:"/gcode2dplotterart/docs/api/Plotter3D",draft:!1,editUrl:"https://github.com/TravisBumgarner/gcode2dplotterart/tree/main/gcode2dplotterart-website/docs/api/Plotter3D.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Plotter2D",permalink:"/gcode2dplotterart/docs/api/Plotter2D"}},p={},u=[{value:"<strong>init</strong>",id:"init",level:2},{value:"add_layer",id:"add_layer",level:2},{value:"get_min_and_max_points",id:"get_min_and_max_points",level:2},{value:"get_plotting_data",id:"get_plotting_data",level:2},{value:"is_point_in_bounds",id:"is_point_in_bounds",level:2},{value:"preview",id:"preview",level:2},{value:"save",id:"save",level:2}],s={toc:u},d="wrapper";function m(t){let{components:e,...n}=t;return(0,a.kt)(d,(0,r.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"plotter3d"},"Plotter3D"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Plotter3D")," is a 3D plotter for creating artwork using G-code. This class should be used with a 3D printer."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Plotter3D")," extends from the abstract class ",(0,a.kt)("inlineCode",{parentName:"p"},"Plotter"),"."),(0,a.kt)("h2",{id:"init"},(0,a.kt)("strong",{parentName:"h2"},"init")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"__init__(\n  self\n  title: str\n  x_min: float\n  x_max: float\n  y_min: float\n  y_max: float\n  z_plotting_height: float\n  z_navigation_height: float\n  feed_rate: float\n  handle_out_of_bounds: Union[Literal['Warning']\n  Literal['Error']] = 'Warning'\n  output_directory: str = './output'\n)\n ->  None\n")),(0,a.kt)("p",null,"Initializes a new instance of the Plotter3D class."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Args:")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"title (str) : The title of the work of art."),(0,a.kt)("li",{parentName:"ul"},"x_min (float) : The minimum X-coordinate of the plotter."),(0,a.kt)("li",{parentName:"ul"},"y_min (float) : The minimum Y-coordinate of the plotter."),(0,a.kt)("li",{parentName:"ul"},"x_max (float) : The maximum X-coordinate of the plotter."),(0,a.kt)("li",{parentName:"ul"},"y_max (float) : The maximum Y-coordinate of the plotter."),(0,a.kt)("li",{parentName:"ul"},"z_plotting_height (float) : The height of the drawing instrument when plotting on the plotting surface."),(0,a.kt)("li",{parentName:"ul"},"z_navigation_height (float) : The height of the drawing instrument when navigating to a new location."),(0,a.kt)("li",{parentName:"ul"},"feed_rate (float) : The feed rate for the plotter."),(0,a.kt)("li",{parentName:"ul"},"handle_out_of_bounds (",(0,a.kt)("inlineCode",{parentName:"li"},"Warning")," | ",(0,a.kt)("inlineCode",{parentName:"li"},"Error"),", optional):\nHow to handle out-of-bounds points.\n",(0,a.kt)("inlineCode",{parentName:"li"},"Warning")," will print a warning, skip the point, and continue.\n",(0,a.kt)("inlineCode",{parentName:"li"},"Error")," will throw an error and stop.\nDefaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"Warning"),"."),(0,a.kt)("li",{parentName:"ul"},"output_directory (str, optional) : The directory where G-code files will be saved. Defaults to ",(0,a.kt)("inlineCode",{parentName:"li"},"./output"),".")),(0,a.kt)("h2",{id:"add_layer"},"add_layer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"add_layer(\n  self\n  title: str\n  color: Optional[str] = None\n  line_width: float = 2.0\n  preview_only: bool = False\n)\n ->  gcode2dplotterart.Layer.Layer3D\n")),(0,a.kt)("p",null,"Adds a new layer to the plotter."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Args:")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"title (str): The title of the layer."),(0,a.kt)("li",{parentName:"ul"},"color (Optional","[str]",", optional): The color of the layer. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},"line_width (float, optional): The line width of the layer. Defaults to 2.0."),(0,a.kt)("li",{parentName:"ul"},"preview_only (bool, optional): Whether the layer is for preview only. Defaults to False.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Layer3D: The newly created layer.")),(0,a.kt)("h2",{id:"get_min_and_max_points"},"get_min_and_max_points"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"get_min_and_max_points(\n  self\n)\n ->  Dict[Literal['x_min', 'y_min', 'x_max', 'y_max'], float]\n")),(0,a.kt)("p",null,"Find the min and max plot points of the plotter."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"dict : {x_min (float), y_min (float), x_max (float), y_max (float)}\nA dictionary containing the min and max plot points of the plotter.")),(0,a.kt)("h2",{id:"get_plotting_data"},"get_plotting_data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"get_plotting_data(\n  self\n)\n ->  Dict[str, Dict[str, List[str]]]\n")),(0,a.kt)("p",null,"Get current plotting data."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'dict: {"layer" : {"setup": [], "plotting": [], "teardown": []}}\nA dictionary of dictionaries containing the setup, plotting, and teardown instructions as an array of\nG-Code instruction strings per layer. Mostly used for testing purposes.')),(0,a.kt)("h2",{id:"is_point_in_bounds"},"is_point_in_bounds"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"is_point_in_bounds(\n  self\n  x: float\n  y: float\n)\n ->  bool\n")),(0,a.kt)("p",null,"Whether the point to be plotted is within the plotter bounds."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Args:")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"x (float) : The x-coordinate of the point to be plotted."),(0,a.kt)("li",{parentName:"ul"},"y (float) : The y-coordinate of the point to be plotted.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"bool : Whether the point to be plotted is within the plotter bounds.")),(0,a.kt)("h2",{id:"preview"},"preview"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"preview(\n  self\n  show_entire_plotting_area: bool = True\n)\n ->  None\n")),(0,a.kt)("p",null,"Generate a preview graph of the plotter's layers. Layers will be plotted in the order they've been added to the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Plotter"),". Only looks at instructions during the plotting phase."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Args:")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"show_entire_plotting_area (bool, optional): Whether to show the entire plotting area or just the\nsize of the art to be plotted. Defaults to True.")),(0,a.kt)("h2",{id:"save"},"save"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"save(\n  self\n  clear_output_before_save: bool = True\n  include_layer_number: bool = True\n)\n ->  None\n")),(0,a.kt)("p",null,"Save all the layers to the output directory defined by the ",(0,a.kt)("inlineCode",{parentName:"p"},"output_directory")," Plotter param. Each layer will be\nsaved as an individual file with the filename defined by ",(0,a.kt)("inlineCode",{parentName:"p"},"{layer_number}_{layer_title}.gcode"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Args:")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"clear_output_before_save (bool, optional): Whether to remove all files from the artwork output directory\n(defined as ",(0,a.kt)("inlineCode",{parentName:"li"},"[output_directory]/[title]"),") before saving. Defaults to True."),(0,a.kt)("li",{parentName:"ul"},"include_layer_number (bool, optional): Whether to prepend filename with ",(0,a.kt)("inlineCode",{parentName:"li"},"layer_number"),". Defaults to True.")))}m.isMDXComponent=!0}}]);